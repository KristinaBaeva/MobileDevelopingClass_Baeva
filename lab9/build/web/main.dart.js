// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk'], (function load__zapp_user_main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var Machine = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    }
  }, false);
  var C = [void 0];
  var I = ["file:///zapp/project/lib/classes/Machine.dart"];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    let t0;
    let coffeeMachine = new Machine.Machine.new({coffeeBeans: 500, milk: 1000, water: 2000});
    let inputs = T.JSArrayOfString().of(["1", "2", "3", "1", "4", "5"]);
    let inputIndex = 0;
    while (true) {
      core.print("\n=== Кофемашина ===");
      core.print("1. Приготовить эспрессо (50 руб)");
      core.print("2. Проверить уровень ресурсов");
      core.print("3. Пополнить ресурсы");
      core.print("4. Забрать деньги");
      core.print("5. Выход");
      core.print("Выберите действие: ");
      let input = inputs[$_get]((t0 = inputIndex, inputIndex = t0 + 1, t0));
      core.print(input);
      switch (input) {
        case "1":
          {
            if (coffeeMachine.makeCoffee({price: 50})) {
              core.print("Ваш эспрессо готов!");
            } else {
              core.print("Недостаточно ресурсов для приготовления кофе");
            }
            break;
          }
        case "2":
          {
            core.print("\nТекущий уровень ресурсов:");
            core.print("Кофейные зерна: " + dart.str(coffeeMachine.coffeeBeans) + " гр");
            core.print("Молоко: " + dart.str(coffeeMachine.milk) + " мл");
            core.print("Вода: " + dart.str(coffeeMachine.water) + " мл");
            core.print("Деньги в машине: " + dart.str(coffeeMachine.cash) + " руб");
            break;
          }
        case "3":
          {
            core.print("\nЧто вы хотите пополнить?");
            core.print("1. Кофейные зерна");
            core.print("2. Молоко");
            core.print("3. Вода");
            core.print("Выберите ресурс: ");
            let resource = "1";
            core.print(resource);
            core.print("Введите количество: ");
            let amount = 100;
            core.print(amount);
            if (amount <= 0) {
              core.print("Некорректное количество");
              break;
            }
            switch (resource) {
              case "1":
                {
                  coffeeMachine.addCoffeeBeans(amount);
                  core.print("Добавлено " + dart.str(amount) + " гр кофейных зерен");
                  break;
                }
              case "2":
                {
                  coffeeMachine.addMilk(amount);
                  core.print("Добавлено " + dart.str(amount) + " мл молока");
                  break;
                }
              case "3":
                {
                  coffeeMachine.addWater(amount);
                  core.print("Добавлено " + dart.str(amount) + " мл воды");
                  break;
                }
              default:
                {
                  core.print("Некорректный выбор");
                }
            }
            break;
          }
        case "4":
          {
            let collected = coffeeMachine.cash;
            coffeeMachine.collectCash();
            core.print("Вы забрали " + dart.str(collected) + " руб");
            break;
          }
        case "5":
          {
            return;
          }
        default:
          {
            core.print("Некорректный ввод");
          }
      }
      if (inputIndex >= inputs[$length]) break;
    }
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var _coffeeBeans = dart.privateName(Machine, "_coffeeBeans");
  var _milk = dart.privateName(Machine, "_milk");
  var _water = dart.privateName(Machine, "_water");
  var _cash = dart.privateName(Machine, "_cash");
  var _subtractResources = dart.privateName(Machine, "_subtractResources");
  Machine.Machine = class Machine$ extends core.Object {
    static ['_#new#tearOff'](opts) {
      let coffeeBeans = opts && 'coffeeBeans' in opts ? opts.coffeeBeans : null;
      let milk = opts && 'milk' in opts ? opts.milk : null;
      let water = opts && 'water' in opts ? opts.water : null;
      let cash = opts && 'cash' in opts ? opts.cash : 0;
      return new Machine.Machine.new({coffeeBeans: coffeeBeans, milk: milk, water: water, cash: cash});
    }
    get coffeeBeans() {
      return this[_coffeeBeans];
    }
    get milk() {
      return this[_milk];
    }
    get water() {
      return this[_water];
    }
    get cash() {
      return this[_cash];
    }
    isAvailable(opts) {
      let beansNeeded = opts && 'beansNeeded' in opts ? opts.beansNeeded : null;
      let waterNeeded = opts && 'waterNeeded' in opts ? opts.waterNeeded : null;
      let milkNeeded = opts && 'milkNeeded' in opts ? opts.milkNeeded : 0;
      return this[_coffeeBeans] >= beansNeeded && this[_water] >= waterNeeded && this[_milk] >= milkNeeded;
    }
    [_subtractResources](opts) {
      let beans = opts && 'beans' in opts ? opts.beans : null;
      let water = opts && 'water' in opts ? opts.water : null;
      let milk = opts && 'milk' in opts ? opts.milk : 0;
      this[_coffeeBeans] = this[_coffeeBeans] - beans;
      this[_water] = this[_water] - water;
      this[_milk] = this[_milk] - milk;
    }
    makeCoffee(opts) {
      let price = opts && 'price' in opts ? opts.price : null;
      if (!this.isAvailable({beansNeeded: 50, waterNeeded: 100})) {
        return false;
      }
      this[_subtractResources]({beans: 50, water: 100});
      this[_cash] = this[_cash] + price;
      return true;
    }
    addCoffeeBeans(amount) {
      return this[_coffeeBeans] = this[_coffeeBeans] + amount;
    }
    addMilk(amount) {
      return this[_milk] = this[_milk] + amount;
    }
    addWater(amount) {
      return this[_water] = this[_water] + amount;
    }
    collectCash() {
      return this[_cash] = 0;
    }
  };
  (Machine.Machine.new = function(opts) {
    let coffeeBeans = opts && 'coffeeBeans' in opts ? opts.coffeeBeans : null;
    let milk = opts && 'milk' in opts ? opts.milk : null;
    let water = opts && 'water' in opts ? opts.water : null;
    let cash = opts && 'cash' in opts ? opts.cash : 0;
    this[_coffeeBeans] = coffeeBeans;
    this[_milk] = milk;
    this[_water] = water;
    this[_cash] = cash;
    ;
  }).prototype = Machine.Machine.prototype;
  dart.addTypeTests(Machine.Machine);
  dart.addTypeCaches(Machine.Machine);
  dart.setMethodSignature(Machine.Machine, () => ({
    __proto__: dart.getMethods(Machine.Machine.__proto__),
    isAvailable: dart.fnType(core.bool, [], {milkNeeded: core.int}, {beansNeeded: core.int, waterNeeded: core.int}),
    [_subtractResources]: dart.fnType(dart.void, [], {milk: core.int}, {beans: core.int, water: core.int}),
    makeCoffee: dart.fnType(core.bool, [], {}, {price: core.int}),
    addCoffeeBeans: dart.fnType(dart.void, [core.int]),
    addMilk: dart.fnType(dart.void, [core.int]),
    addWater: dart.fnType(dart.void, [core.int]),
    collectCash: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(Machine.Machine, () => ({
    __proto__: dart.getGetters(Machine.Machine.__proto__),
    coffeeBeans: core.int,
    milk: core.int,
    water: core.int,
    cash: core.int
  }));
  dart.setLibraryUri(Machine.Machine, I[0]);
  dart.setFieldSignature(Machine.Machine, () => ({
    __proto__: dart.getFields(Machine.Machine.__proto__),
    [_coffeeBeans]: dart.fieldType(core.int),
    [_milk]: dart.fieldType(core.int),
    [_water]: dart.fieldType(core.int),
    [_cash]: dart.fieldType(core.int)
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/classes/Machine.dart": Machine
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/classes/Machine.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__classes__Machine: Machine
  };
}));

//# sourceMappingURL=main.js.map
